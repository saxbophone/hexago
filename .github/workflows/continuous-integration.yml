name: continuous-integration

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize]

jobs:
  continuous-integration:
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: Release
      VERBOSE: 10
    strategy:
      fail-fast: false
      matrix:
        # specify a specific compiler to build with each OS separately
        include:
          # TODO: install SFML's dependencies manually to allow building on Linux
          # - platform_name: linux
          #   os: ubuntu-20.04
          #   cxx: g++-10
          #   cmake_generator: "Unix Makefiles"
          # - platform_name: macos
          #   os: macos-10.15
          #   cxx: clang++
          #   cmake_generator: "Unix Makefiles"
          # # NOTE: CXX seems to be ignored on Windows, but specify it anyway for consistency
          # - platform_name: windows
          #   os: windows-2019
          #   cxx: msvc
          #   cmake_generator: ""
          # XXX: Broken! The MinGW system that ships with Github Actions cannot
          # link Hexago.scr properly to the Windows screensaver libraries.
          # I know for a fact that this project can build with MinGW on Windows
          # (I can do this successfully in my Win10 VM).
          # TODO: Fix this or find a different non-MSVC build process on Windows
          - platform_name: windows_mingw
            os: windows-2019
            cmake_generator: "MSYS Makefiles"

    steps:
      - uses: actions/checkout@v2

      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: >-
            git
            make
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake

      - name: Cache CMake dependency source code
        uses: actions/cache@v2
        env:
          cache-name: cache-cmake-dependency-sources
        with:
          # CMake cache is at ${{github.workspace}}/build/_deps but we only will cache folders ending in '-src' to cache source code
          path: ${{github.workspace}}/build/_deps/*-src
          # Cache hash is dependent on CMakeLists files anywhere as these can change what's in the cache, as well as cmake modules files
          key: ${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
          # it's acceptable to reuse caches for different CMakeLists content if exact match is not available and unlike build caches, we
          # don't need to restrict these by OS or compiler as it's only source code that's being cached
          restore-keys: |
            ${{ env.cache-name }}-

      - name: Cache CMake dependency build objects
        uses: actions/cache@v2
        env:
          cache-name: cache-cmake-dependency-builds
        with:
          # CMake cache is at ${{github.workspace}}/build/_deps but we only care about the folders ending in -build or -subbuild
          path: |
            ${{github.workspace}}/build/_deps/*-build
            ${{github.workspace}}/build/_deps/*-subbuild
          # Cache hash is dependent on CMakeLists files anywhere as these can change what's in the cache, as well as cmake modules files
          key: ${{ env.cache-name }}-${{ matrix.platform_name }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
          # it's acceptable to reuse caches for different CMakeLists content if exact match is not available
          # as long as the OS and Compiler match exactly
          restore-keys: |
            ${{ env.cache-name }}-${{ matrix.platform_name }}-

      # when building on master branch and not a pull request, build and test in release mode (optimised build)
      - name: Set Build Mode to Release
        shell: msys2 {0}
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master' }}
        run: echo "BUILD_TYPE=Release" >> $GITHUB_ENV

      - name: Configure CMake
        env:
          CXX: ${{ matrix.cxx }}
          CMAKE_GENERATOR: ${{ matrix.cmake_generator }}
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: msys2 {0}
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source 
        # and build directories, but this is only available with CMake 3.13 and higher.  
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX:PATH=$GITHUB_WORKSPACE/test_install

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: msys2 {0}
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . -j5 --config $BUILD_TYPE

      # - name: Test Install
      #   working-directory: ${{github.workspace}}/build
      #   shell: bash
      #   # Test install with CMake to the "test_install" directory
      #   run: cmake --install . --config $BUILD_TYPE
